//121. 买卖股票的最佳时机
//唯一一支股票 只能买一次
// 版本一 
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int len = prices.size();
        if (len == 0) return 0;
        //dp[i][0] 表示第i天持有股票所得最多现金   i 1 不持有股票所得所有现金
        vector<vector<int>> dp(len, vector<int>(2));
        dp[0][0] -= prices[0];
        dp[0][1] = 0;
        for (int i = 1; i < len; i++) {
            dp[i][0] = max(dp[i - 1][0], -prices[i]);//不操作  买入
            dp[i][1] = max(dp[i - 1][1], prices[i] + dp[i - 1][0]);//不操作 卖出
        }
        return dp[len - 1][1];//本题中不持有股票状态所得金钱一定比持有股票状态得到的多！
    }
    
    // 版本二
    //dp[i]只是依赖于dp[i - 1]的状态 
    //只需要记录 当前天的dp状态和前一天的dp状态就可以了，可以使用滚动数组来节省空间
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int len = prices.size();
        vector<vector<int>> dp(2, vector<int>(2)); // 注意这里只开辟了一个2 * 2大小的二维数组
        dp[0][0] -= prices[0];
        dp[0][1] = 0;
        for (int i = 1; i < len; i++) {
            dp[i % 2][0] = max(dp[(i - 1) % 2][0], -prices[i]);
            dp[i % 2][1] = max(dp[(i - 1) % 2][1], prices[i] + dp[(i - 1) % 2][0]);
        }
        return dp[(len - 1) % 2][1];
    }
};

// 122.买卖股票的最佳时机II
//最多持有一支股票 可多次买卖
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int len = prices.size();
        vector<vector<int>> dp(len, vector<int>(2, 0));
        dp[0][0] -= prices[0];
        dp[0][1] = 0;
        for (int i = 1; i < len; i++) {
            //// 注意这里是和121. 买卖股票的最佳时机唯一不同的地方。
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i]); //持有股票 不操作 今天买入
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i]);//不持有股票 不操作 今天卖出
        }
        return dp[len - 1][1];
    }
};
  
//滚动数组
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int len = prices.size();
        vector<vector<int>> dp(2, vector<int>(2)); // 注意这里只开辟了一个2 * 2大小的二维数组
        dp[0][0] -= prices[0];
        dp[0][1] = 0;
        for (int i = 1; i < len; i++) {
            dp[i % 2][0] = max(dp[(i - 1) % 2][0], dp[(i - 1) % 2][1] - prices[i]);
            dp[i % 2][1] = max(dp[(i - 1) % 2][1], prices[i] + dp[(i - 1) % 2][0]);
        }
        return dp[(len - 1) % 2][1];
    }
};

// 123.买卖股票的最佳时机III
//最多持有一支股票 最多2笔交易
//一天一共就有五个状态，
// 没有操作 （其实我们也可以不设置这个状态）
// 第一次持有股票  第一次不持有股票
// 第二次持有股票  第二次不持有股票
// dp[i][j]中 i表示第i天，j为 [0 - 4] 五个状态，dp[i][j]表示第i天状态j所剩最大现金。
// 版本一
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.size() == 0) return 0;
        vector<vector<int>> dp(prices.size(), vector<int>(5, 0));
        dp[0][1] = -prices[0];
        dp[0][3] = -prices[0];//也就是只完成一笔交易
        for (int i = 1; i < prices.size(); i++) {
            dp[i][0] = dp[i - 1][0];
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
            dp[i][2] = max(dp[i - 1][2], dp[i - 1][1] + prices[i]);
            dp[i][3] = max(dp[i - 1][3], dp[i - 1][2] - prices[i]);
            dp[i][4] = max(dp[i - 1][4], dp[i - 1][3] + prices[i]);
        }
        return dp[prices.size() - 1][4];
    }
};

//188.买卖股票的最佳时机IV
//你最多可以完成 k 笔交易。
//大家应该发现规律了吧 ，除了0以外，偶数就是卖出，奇数就是买入。
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {

        if (prices.size() == 0) return 0;
        vector<vector<int>> dp(prices.size(), vector<int>(2 * k + 1, 0));
        //在初始化的地方同样要类比j为偶数是卖、奇数是买的状态。
        for (int j = 1; j < 2 * k; j += 2) {
            dp[0][j] = -prices[0];
        }
        for (int i = 1;i < prices.size(); i++) {
            for (int j = 0; j < 2 * k - 1; j += 2) {
                dp[i][j + 1] = max(dp[i - 1][j + 1], dp[i - 1][j] - prices[i]);//买入
                dp[i][j + 2] = max(dp[i - 1][j + 2], dp[i - 1][j + 1] + prices[i]);//卖出
            }
        }
        return dp[prices.size() - 1][2 * k];
    }
};

//309.最佳买卖股票时机含冷冻期
//卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
//状态0：持有股票状态（今天买入股票，或者是之前就买入了股票然后没有操作，一直持有）
// 不持有股票状态，这里就有两种卖出股票状态
// 状态1：不在冷冻期 手里没股票
// 状态2：今天卖出股票
// 状态3：今天为冷冻期状态，但冷冻期状态不可持续，只有一天！
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if (n == 0) return 0;
        vector<vector<int>> dp(n, vector<int>(4, 0));
        dp[0][0] -= prices[0]; // 持股票
        for (int i = 1; i < n; i++) {//dp i 从上一天 i - 1来的
            dp[i][0] = max(dp[i - 1][0], max(dp[i - 1][3] - prices[i], dp[i - 1][1] - prices[i]));
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][3]);
            dp[i][2] = dp[i - 1][0] + prices[i];
            dp[i][3] = dp[i - 1][2];
        }
        return max(dp[n - 1][3], max(dp[n - 1][1], dp[n - 1][2]));
    }
};

//714.买卖股票的最佳时机含手续费
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>> dp(n, vector<int>(2, 0));
        dp[0][0] -= prices[0]; // 持股票
        for (int i = 1; i < n; i++) {
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i]);
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i] - fee);
        }
        return max(dp[n - 1][0], dp[n - 1][1]);
    }
};