//BFS 二叉树的层序遍历 广度优先搜索之一打十
//迭代 queue
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*> que;
        if (root != NULL) que.push(root);
        vector<vector<int>> result;
        while (!que.empty()) {
            int size = que.size();
            vector<int> vec;
            // 这里一定要使用固定大小size，不要使用que.size()，因为que.size是不断变化的
            for (int i = 0; i < size; i++) { //获取每一层的元素
                TreeNode* node = que.front();
                que.pop();
                vec.push_back(node->val);
                if (node->left) que.push(node->left);//将下一层的节点入队
                if (node->right) que.push(node->right);
            }
            result.push_back(vec);
        }
        return result;
    }
};

//递归
class Solution {
public:
    void order(TreeNode* cur, vector<vector<int>>& result, int depth)
    {
        if (cur == nullptr) return;
        if (result.size() == depth) result.push_back(vector<int>());
        result[depth].push_back(cur->val);
        order(cur->left, result, depth + 1);
        order(cur->right, result, depth + 1);
    }
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;
        int depth = 0;
        order(root, result, depth);
        return result;
    }
};

//从下到上  reverse(res.begin(),res.end());
//二维vector的翻转 不会反转内层 vector 的元素顺序

//199.二叉树的右视图
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        queue<TreeNode*> q;
        if(root != NULL) q.push(root);
        vector<int> vec;
        while(!q.empty()){
            int size = q.size();
            for(int i=0; i < size; i++){//每层2件事 1加入最右元素 2下层元素入队
                TreeNode* node = q.front();
                q.pop();
                if(i == size - 1) vec.push_back(node -> val);//遍历每层最右的元素加入
                if(node -> left) q.push(node -> left);
                if(node -> right) q.push(node -> right);
            }
        }
        return vec;
    }
};

//637.二叉树的层平均值
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
       queue<TreeNode*> q;
        if(root != NULL) q.push(root);
        vector<double> vec;
        while(!q.empty()){
            int size = q.size();
            double sum = 0;
            for(int i=0; i < size; i++){
                TreeNode* node = q.front();
                q.pop();
                sum += node -> val;
                if(node -> left) q.push(node -> left);
                if(node -> right) q.push(node -> right);
            }
            vec.push_back( sum / size );
        }
        return vec; 
    }
};

//429.N叉树的层序遍历
class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
         queue<Node*> q;
        if(root != NULL) q.push(root);
        vector<vector<int>> res;
        while(!q.empty()){
            int size = q.size();
            vector<int> vec;
            for(int i=0; i < size; i++){
                Node* node = q.front();
                q.pop();
                vec.push_back(node -> val);
                for(int j = 0; j < node -> children.size(); j++)
                { q.push(node -> children[j]); }
            }
            res.push_back(vec);
        }
        return res;
    }
};

//515.在每个树行中找最大值
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        queue<TreeNode*> q;
        if(root != NULL) q.push(root);
        vector<int> vec;
        while(!q.empty()){
            int size = q.size();
            int maxVal = INT_MIN;
            for(int i=0; i < size; i++){
                TreeNode* node = q.front();
                q.pop();
                maxVal = maxVal > node -> val ? maxVal : node -> val;
                if(node -> left) q.push(node -> left);
                if(node -> right) q.push(node -> right);
            }
            vec.push_back(maxVal);
        }
        return vec;
    }
};

//116.填充每个节点的下一个右侧节点指针
class Solution {
public:
    Node* connect(Node* root) {
        queue<Node*> que;
        if (root != NULL) que.push(root);
        while (!que.empty()) {
            int size = que.size();
            // vector<int> vec;
            Node* nodePre;
            Node* node;
            for (int i = 0; i < size; i++) {
                if (i == 0) {
                    nodePre = que.front(); // 取出一层的头结点
                    que.pop();
                    node = nodePre;
                } else {
                    node = que.front();
                    que.pop();
                    nodePre->next = node; // 本层前一个节点next指向本节点
                    nodePre = nodePre->next;
                }
                if (node->left) que.push(node->left);
                if (node->right) que.push(node->right);
            }
            nodePre->next = NULL; // 本层最后一个节点指向NULL
        }
        return root;

    }
};

//104.二叉树的最大深度
class Solution {
public:
    int maxDepth(TreeNode* root) {
        queue<TreeNode*> que;
        int sizeTree = 0;
        if (root != NULL) que.push(root);
        while (!que.empty()) {
            int size = que.size();
            sizeTree++;
            // 这里一定要使用固定大小size，不要使用que.size()，因为que.size是不断变化的
            for (int i = 0; i < size; i++) { //获取每一层的元素
                TreeNode* node = que.front();
                que.pop();
                if (node->left) que.push(node->left);
                if (node->right) que.push(node->right);
            }
        }
        return sizeTree;
    }
};

//111.二叉树的最小深度
class Solution {
public:
    int minDepth(TreeNode* root) {
        queue<TreeNode*> que;
        int sizeTree = 0;
        if (root != NULL) que.push(root);
        while (!que.empty()) {
            int size = que.size();
            sizeTree++;
            // 这里一定要使用固定大小size，不要使用que.size()，因为que.size是不断变化的
            for (int i = 0; i < size; i++) { //获取每一层的元素
                TreeNode* node = que.front();
                que.pop();
                if (node->left) que.push(node->left);
                if (node->right) que.push(node->right);
                if( !node -> left && !node -> right ) return sizeTree;//左右孩子都不存在
            }
        }
        return sizeTree;
    }
};


//513.找树左下角的值
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*> que;
        if (root != NULL) que.push(root);
        int result = 0;
        while (!que.empty()) {
            int size = que.size();
            for (int i = 0; i < size; i++) {
                TreeNode* node = que.front();
                que.pop();
                if (i == 0) result = node->val; // 记录最后一行第一个元素
                if (node->left) que.push(node->left);
                if (node->right) que.push(node->right);
            }
        }
        return result;
    }
};