//用栈实现队列
//栈 后进先出 队列 先进后出  用2个栈存储 两次相反方向的弹出 -> 先进先出
class MyQueue {
public:
    stack<int> stIn;
    stack<int> stOut;
    /** Initialize your data structure here. */
    MyQueue() {

    }
    /** Push element x to the back of queue. */
    void push(int x) {
        stIn.push(x);
    }

    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        // 只有当stOut为空的时候，再从stIn里导入数据（导入stIn全部数据）
        if (stOut.empty()) {
            // 从stIn导入数据直到stIn为空
            while(!stIn.empty()) {
                stOut.push(stIn.top());//栈的top()是最新元素
                stIn.pop();
            }
        }
        int result = stOut.top();
        stOut.pop();
        return result;
    }

    /** Get the front element. */
    int peek() {//pop()的复用
        int res = this->pop(); // 直接使用已有的pop函数
        stOut.push(res); // 因为pop函数弹出了元素res，所以再添加回去 此时所有元素已经在out
        return res;
    }

    /** Returns whether the queue is empty. */
    bool empty() {
        return stIn.empty() && stOut.empty();
    }
};

//用队列实现栈
//栈 后进先出 队列 先进后出  每次弹出最新元素时 整体移动前置元素到它后面 弹出它
class MyStack {
public:
    queue<int> que;

    MyStack() {
        
    }
    
    void push(int x) {
        que.push(x);    
    }
    
    int pop() {
        int size = que.size();
        size--;
        while(size--){
            que.push(que.front());//把队尾弹出的捡到队头
            que.pop();
        }
        int res = que.front();
        que.pop();
        return res;
    }
    
    int top() {
        int res = this -> pop();
        que.push(res);
        return res;
    }
    
    bool empty() {
        return que.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */